searchState.loadedDescShard("arceos_posix_api", 0, "POSIX-compatible APIs for ArceOS modules\nPlatform-specific constants and parameters.\nPOSIX C types.\nAccept for connections on a socket\nBind a address to a socket.\nGet the clock tick\nGet clock time since booting\nClose a file by <code>fd</code>.\nConnects the socket to the address specified.\nDuplicate a file descriptor.\nDuplicate a file descriptor, but it uses the file …\nCreates a new epoll instance.\nControl interface for an epoll file descriptor\nWaits for events on the epoll instance referred to by the …\nExit current task\nManipulate file descriptor.\nFree memory from the heap according to the pointer.\nFree queried <code>addrinfo</code> struct\nGet file metadata by <code>fd</code> and write into <code>buf</code>.\nQuery addresses for a domain name.\nGet the path of the current directory.\nGet peer address to which the socket sockfd is connected.\nGet current thread ID.\nGet resource limitations\nGet current address to which the socket sockfd is bound.\nListen for connections on a socket\nSet the position of the file indicated by <code>fd</code>.\nGet the metadata of the symbolic link and write into <code>buf</code>.\nAllocate memory from the heap according to the size.\nSleep some nanoseconds\nOpen a file by <code>filename</code> and insert it into the file …\nAllocate pages from the heap.\nFree pages from the heap.\nCreate a pipe\nRead from or write to a file descriptor at a given offset.\nRead data at a given offset into multiple buffers\nCreate a new thread with the given entry point and …\nDetach the current thread.\nCheck if two threads are equal.\nExits the current thread. The value <code>retval</code> will be …\nWaits for the given thread to exit, and stores the return …\nDestroy the given mutex.\nInitialize a mutex.\nLock the given mutex.\nUnlock the given mutex.\nSet the type of the given mutex attribute.\nReturns the <code>pthread</code> struct of current thread.\nWrite to a file descriptor at a given offset.\nWrite to a file descriptor at a given offset\nRead data from the file indicated by <code>fd</code>.\nRead from a file descriptor into multiple buffers\nReceive a message on a socket.\nReceive a message on a socket and get its source address.\nRename <code>old</code> to <code>new</code> If new exists, it is first removed.\nRelinquish the CPU, and switches to another task.\nMonitor multiple file descriptors, waiting until one or …\nAllocate a semaphore.\nDestroy a semaphore.\nPost a semaphore.\nWait a semaphore.\nSend a message on a socket to the address connected.\nSend a message on a socket to the address specified.\nSet resource limitations\nShut down a full-duplex connection.\nCreate an socket for communication.\nGet the file metadata by <code>path</code> and write into <code>buf</code>.\nReturn system configuration infomation\nCreate a timer.\nDelete a timer.\nSet the time for a timer.\nWrite data to the file indicated by <code>fd</code>.\nWrite to a file descriptor from multiple buffers\nArchitecture identifier.\nPlatform package.\nPlatform identifier.\nStack size of each task.\nNumber of timer ticks per second (Hz). A timer tick may …\nDevice specifications\nPlatform configs\nMMIO ranges with format (<code>base_paddr</code>, <code>size</code>).\nEnd PCI bus number.\nBase physical address of the PCIe ECAM space.\nPCI device memory ranges.\nTimer interrupt num.\nVirtIO MMIO ranges with format (<code>base_paddr</code>, <code>size</code>).\nPlatform family. Number of CPUs\nKernel address space base.\nKernel address space size.\nBase physical address of the kernel image.\nBase virtual address of the kernel image.\nOffset of bus address and phys address. some boards, the …\nBase address of the whole physical memory.\nEnd address of the whole physical memory.\nSize of the whole physical memory.\nLinear mapping offset, for quick conversions between …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")